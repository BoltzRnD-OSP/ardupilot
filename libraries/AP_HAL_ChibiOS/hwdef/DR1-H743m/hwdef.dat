# hw definition file for processing by chibios_hwdef.py for CUAV-X7

# MCU class and specific type
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 16000000

# board ID for firmware load
APJ_BOARD_ID 1051

FLASH_SIZE_KB 2048

# with 2M flash we can afford to optimize for speed
#env OPTIMIZE -O2

# ChibiOS system timer
STM32_ST_USE_TIMER 2

# bootloader takes first sector
FLASH_RESERVE_START_KB 128

# order of UARTs (and USB)
SERIAL_ORDER OTG1 USART2 #UART7 USART1 USART3

# default the 2nd interface to MAVLink2 until MissionPlanner updates drivers
#define HAL_OTG2_PROTOCOL SerialProtocol_MAVLink2

# now we define the pins that USB is connected on
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# Port switching for USB HS and FS,high = USB_FS , LOW = USB_HS
#PH15 USB_HS_ENABLE OUTPUT HIGH
#define USB_HW_ENABLE_HS 0

# these are the pins for SWD debugging with a STlinkv2 or black-magic probe
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# SPI1 - internal sensors
PB3 SPI1_SCK SPI1 PULLUP
PB4 SPI1_MISO SPI1 PULLUP
PB5 SPI1_MOSI SPI1 PULLUP

## SPI2 - FRAM
#PB13 SPI2_SCK SPI2 PULLUP
#PB14 SPI2_MISO SPI2 PULLUP
#PB15 SPI2_MOSI SPI2 PULLUP
#
# SPI4 - external1
PE2 SPI4_SCK SPI4 PULLUP
PE5 SPI4_MISO SPI4 PULLUP
PE6 SPI4_MOSI SPI4 PULLUP

# sensor 

PA4  ICM42688_CS CS PULLUP
#PB1  ICM20948_CS CS PULLUP
PB0  MS5611_BOARD_CS CS PULLUP
#PA4  EXT1_CS1 CS PULLUP

# I2C buses

# # I2C1 is on GPS port
# PB8 I2C1_SCL I2C1
# PB9 I2C1_SDA I2C1
# 
# # I2C4 is on JST-GH
# PD12 I2C4_SCL I2C4
# PD13 I2C4_SDA I2C4
# 
# # order of I2C buses
# I2C_ORDER I2C4 I2C1

# drdy pins
PE12  DRDY1_ICM42688 INPUT
#PE13  DRDY2_ICM20948 INPUT

# USART2 is telem1
PD6 USART2_RX USART2
PD5 USART2_TX USART2
PD3 USART2_CTS USART2
PD4 USART2_RTS USART2

## USART7 is telem2
#PE7 UART7_RX UART7
#PE8 UART7_TX UART7
#PE10 UART7_CTS UART7
#PE9 UART7_RTS UART7

## USART1 is GPS1
#PB7 USART1_RX USART1 NODMA
#PB6 USART1_TX USART1 NODMA
#
## USART3 is debug
#PB10 USART3_TX USART3 NODMA
#PB11 USART3_RX USART3 NODMA

# SBUS, DSM port
PE0 UART8_RX UART8
PE1 UART8_TX UART8 

# PWM AUX channels

PA0 TIM5_CH1 TIM5 PWM(1) GPIO(0)
PA1 TIM5_CH2 TIM5 PWM(2) GPIO(1)
PA2 TIM5_CH3 TIM5 PWM(3) GPIO(2)
PA3 TIM5_CH4 TIM5 PWM(4) GPIO(3)
#PA5 TIM2_CH1 TIM2 PWM(5) GPIO(54)
PA6 TIM3_CH1 TIM3 PWM(6) GPIO(5)
PA7 TIM3_CH2 TIM3 PWM(7) GPIO(6)
PA8 TIM1_CH1 TIM1 PWM(8) GPIO(7)

# allow for 14 PWMs by default

# PWM output for buzzer
#PE14 TIM1_CH4 TIM1 GPIO(77) ALARM

PC0 RSSI_IN ADC1 SCALE(1)

# CAN bus
PD10 CAN2_TX CAN2
PD9  CAN2_RX CAN2

# control for silent (no output) for CAN
PD11 GPIO_CAN1_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(70)

# GPIOs

PD8  VDD_BRICK_nVALID INPUT PULLUP # for PowerC (CAN), considered primary power

# SPI devices
SPIDEV icm42688       SPI4 DEVID1  ICM42688_CS     MODE3  2*MHZ  8*MHZ
SPIDEV ms5611         SPI1 DEVID3  MS5611_BOARD_CS MODE3  2*MHZ 8*MHZ

# three IMUs, only one of ICM20689 and ADIS16470 will be included
IMU Invensensev3 SPI:icm42688 ROTATION_NONE

#IMU Invensensev2 SPI:icm20948 ROTATION_NONE

BARO MS56XX SPI:ms5611
define HAL_BARO_ALLOW_INIT_NO_BARO

#define HAL_DEFAULT_INS_FAST_SAMPLE 5

# microSD support
PC8 SDMMC1_D0 SDMMC1
PC9 SDMMC1_D1 SDMMC1
PC10 SDMMC1_D2 SDMMC1
PC11 SDMMC1_D3 SDMMC1
PC12 SDMMC1_CK SDMMC1
PD2 SDMMC1_CMD SDMMC1

# red LED marked as B/E

define HAL_GPIO_LED_ON  0
define HAL_GPIO_LED_OFF 1

# enable RAMTROM parameter storage
define HAL_STORAGE_SIZE 16384
define STORAGE_FLASH_PAGE 14

# enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1

define HAL_BOARD_LOG_DIRECTORY "/APM/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/APM/TERRAIN"

DMA_NOSHARE SPI1*